// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/keepa.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeepaClient is the client API for Keepa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeepaClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type keepaClient struct {
	cc grpc.ClientConnInterface
}

func NewKeepaClient(cc grpc.ClientConnInterface) KeepaClient {
	return &keepaClient{cc}
}

func (c *keepaClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.Keepa/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepaClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.Keepa/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeepaServer is the server API for Keepa service.
// All implementations must embed UnimplementedKeepaServer
// for forward compatibility
type KeepaServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedKeepaServer()
}

// UnimplementedKeepaServer must be embedded to have forward compatible implementations.
type UnimplementedKeepaServer struct {
}

func (UnimplementedKeepaServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedKeepaServer) Register(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedKeepaServer) mustEmbedUnimplementedKeepaServer() {}

// UnsafeKeepaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeepaServer will
// result in compilation errors.
type UnsafeKeepaServer interface {
	mustEmbedUnimplementedKeepaServer()
}

func RegisterKeepaServer(s grpc.ServiceRegistrar, srv KeepaServer) {
	s.RegisterService(&Keepa_ServiceDesc, srv)
}

func _Keepa_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepaServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Keepa/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepaServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keepa_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepaServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Keepa/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepaServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keepa_ServiceDesc is the grpc.ServiceDesc for Keepa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keepa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Keepa",
	HandlerType: (*KeepaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Keepa_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Keepa_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keepa.proto",
}
